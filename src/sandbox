import React, { useState, useEffect, useCallback } from "react";
import { withRouter } from "react-router";

import useAuthStore from "../stores/authStore";
import useProfileStore from "../stores/profileStore";
import InputRange, { Range } from "react-input-range";
import "react-input-range/lib/css/index.css";
import { postSurvey } from "../clients/survey";

import { cardCheck } from "../clients/cards";
import { useForm, Controller } from "react-hook-form";
import Stepper from "react-stepper-horizontal";

const Survey = (props: any) => {
  const profile = useProfileStore((state) => state.data);

  const [loanAmount, setLoanAmount] = useState<number | Range>(0);
  const [orderAmount, setOrderAmount] = useState<number | Range>(0);
  const [turnOver, setTurnOver] = useState<number | Range>(0);

  const token = useAuthStore((state) => state.accessToken);
  const [submitted, setSubmitted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);

  const sections = [
    { title: "Basic Details" },
    { title: "Employment Details" },
  ];

  const {
    register,
    handleSubmit,
    errors,
    reset,
    control,
    unregister,
  } = useForm();

  const city = [
    { label: "Wien", value: "Wien", country_region_code: "AT" },
    { label: "Wien", value: "Wien", country_region_code: "AT" },
    { label: "Wr. Neudorf", value: "Wr. Neudorf", country_region_code: "AT" },
    { label: "Gmunden", value: "Gmunden", country_region_code: "AT" },
    { label: "Mittersill", value: "Mittersill", country_region_code: "AT" },
    { label: "Murau", value: "Murau", country_region_code: "AT" },
    { label: "Sydney, NSW", value: "Sydney, NSW", country_region_code: "AU" },
    {
      label: "Wollongong, NSW",
      value: "Wollongong, NSW",
      country_region_code: "AU",
    },
    {
      label: "Melbourne, VIC",
      value: "Melbourne, VIC",
      country_region_code: "AU",
    },
    {
      label: "Brisbane, QLD",
      value: "Brisbane, QLD",
      country_region_code: "AU",
    },
    { label: "Perth, WA", value: "Perth, WA", country_region_code: "AU" },
    {
      label: "Murdunna, TAS",
      value: "Murdunna, TAS",
      country_region_code: "AU",
    },
    { label: "Birmingham", value: "Birmingham", country_region_code: "GB" },
    { label: "Birmingham", value: "Birmingham", country_region_code: "GB" },
    {
      label: "Sparkhill, Birmingham",
      value: "Sparkhill, Birmingham",
      country_region_code: "GB",
    },
    { label: "Bromsgrove", value: "Bromsgrove", country_region_code: "GB" },
    { label: "Bath", value: "Bath", country_region_code: "GB" },
    { label: "Humbeek", value: "Humbeek", country_region_code: "BE" },
    { label: "Antwerpen", value: "Antwerpen", country_region_code: "BE" },
    { label: "Herentals", value: "Herentals", country_region_code: "BE" },
    { label: "Mechelen", value: "Mechelen", country_region_code: "BE" },
    { label: "Leuven", value: "Leuven", country_region_code: "BE" },
    { label: "Kortrijk", value: "Kortrijk", country_region_code: "BE" },
    { label: "Sofia", value: "Sofia", country_region_code: "BG" },
    { label: "Kustendil", value: "Kustendil", country_region_code: "BG" },
    { label: "Blagoevgrad", value: "Blagoevgrad", country_region_code: "BG" },
    { label: "Plovdiv", value: "Plovdiv", country_region_code: "BG" },
    { label: "Elhovo", value: "Elhovo", country_region_code: "BG" },
    { label: "Varna", value: "Varna", country_region_code: "BG" },
    { label: "Sao Paulo SP", value: "Sao Paulo SP", country_region_code: "BR" },
    {
      label: "Rio de Janeiro RJ",
      value: "Rio de Janeiro RJ",
      country_region_code: "BR",
    },
    { label: "Recife PE", value: "Recife PE", country_region_code: "BR" },
    { label: "Brasilia DF", value: "Brasilia DF", country_region_code: "BR" },
    { label: "Curitiba PR", value: "Curitiba PR", country_region_code: "BR" },
    {
      label: "Porto Alegre RS",
      value: "Porto Alegre RS",
      country_region_code: "BR",
    },
    { label: "Bromley", value: "Bromley", country_region_code: "GB" },
    { label: "Bristol", value: "Bristol", country_region_code: "GB" },
    { label: "Elkhorn", value: "Elkhorn", country_region_code: "CA" },
    { label: "Oakville", value: "Oakville", country_region_code: "CA" },
    { label: "Toronto", value: "Toronto", country_region_code: "CA" },
    { label: "London", value: "London", country_region_code: "CA" },
    { label: "Thunder Bay", value: "Thunder Bay", country_region_code: "CA" },
    { label: "Thunder Bay", value: "Thunder Bay", country_region_code: "CA" },
    { label: "Cambridge", value: "Cambridge", country_region_code: "GB" },
    { label: "Cambridge", value: "Cambridge", country_region_code: "GB" },
    { label: "Cardiff", value: "Cardiff", country_region_code: "GB" },
    { label: "Pratteln", value: "Pratteln", country_region_code: "CH" },
    { label: "Luzern", value: "Luzern", country_region_code: "CH" },
    { label: "Rotkreuz", value: "Rotkreuz", country_region_code: "CH" },
    { label: "Immensee", value: "Immensee", country_region_code: "CH" },
    { label: "Glattbrugg", value: "Glattbrugg", country_region_code: "CH" },
    { label: "Schaffhausen", value: "Schaffhausen", country_region_code: "CH" },
    { label: "Hythe", value: "Hythe", country_region_code: "GB" },
    { label: "Coventry", value: "Coventry", country_region_code: "GB" },
    { label: "Atherstone", value: "Atherstone", country_region_code: "GB" },
    { label: "Znojmo", value: "Znojmo", country_region_code: "CZ" },
    { label: "Blansko", value: "Blansko", country_region_code: "CZ" },
    { label: "Bojkovice", value: "Bojkovice", country_region_code: "CZ" },
    { label: "Vracov", value: "Vracov", country_region_code: "CZ" },
    { label: "Kyjov", value: "Kyjov", country_region_code: "CZ" },
    { label: "Olomouch", value: "Olomouch", country_region_code: "CZ" },
    { label: "Sidcup", value: "Sidcup", country_region_code: "GB" },
    { label: "Hamburg", value: "Hamburg", country_region_code: "DE" },
    { label: "Hamburg 36", value: "Hamburg 36", country_region_code: "DE" },
    { label: "Dusseldorf", value: "Dusseldorf", country_region_code: "DE" },
    {
      label: "Frankfurt/Main",
      value: "Frankfurt/Main",
      country_region_code: "DE",
    },
    { label: "Eningen", value: "Eningen", country_region_code: "DE" },
    { label: "Munchen", value: "Munchen", country_region_code: "DE" },
    { label: "Munchen", value: "Munchen", country_region_code: "DE" },
    {
      label: "Landsberg am Lech",
      value: "Landsberg am Lech",
      country_region_code: "DE",
    },
    { label: "Copenhagen", value: "Copenhagen", country_region_code: "DK" },
    { label: "Vedbaek", value: "Vedbaek", country_region_code: "DK" },
    { label: "Koge", value: "Koge", country_region_code: "DK" },
    { label: "Odense C", value: "Odense C", country_region_code: "DK" },
    { label: "Nyborg", value: "Nyborg", country_region_code: "DK" },
    { label: "Arhus C", value: "Arhus C", country_region_code: "DK" },
    { label: "Arhus N", value: "Arhus N", country_region_code: "DK" },
    { label: "Alborg", value: "Alborg", country_region_code: "DK" },
    { label: "Dudley", value: "Dudley", country_region_code: "GB" },
    { label: "BARIKA", value: "BARIKA", country_region_code: "DZ" },
    { country_region_code: "NG", label: "ABUJA", value: "ABUJA" },
    {
      country_region_code: "NG",
      label: "JOS, Plateau state",
      value: "JOS, Plateau state",
    },
    {
      country_region_code: "NG",
      label: "BENIN, Edo state",
      value: "BENIN, Edo state",
    },
    { label: "ALGIERS", value: "ALGIERS", country_region_code: "DZ" },
    { label: "ALGIERS", value: "ALGIERS", country_region_code: "DZ" },
    { label: "ALGIERS", value: "ALGIERS", country_region_code: "DZ" },
    { label: "MOSTAGANCU", value: "MOSTAGANCU", country_region_code: "DZ" },
    { label: "KHENCHE", value: "KHENCHE", country_region_code: "DZ" },
    { label: "Edinburgh", value: "Edinburgh", country_region_code: "GB" },
    { label: "London", value: "London", country_region_code: "GB" },
    { label: "Tallinn", value: "Tallinn", country_region_code: "EE" },
    { label: "Narva", value: "Narva", country_region_code: "EE" },
    { label: "Rakvere", value: "Rakvere", country_region_code: "EE" },
    { label: "Tapa", value: "Tapa", country_region_code: "EE" },
    { label: "Mustvee", value: "Mustvee", country_region_code: "EE" },
    { label: "Paldiski", value: "Paldiski", country_region_code: "EE" },
    { label: "Edinburgh", value: "Edinburgh", country_region_code: "GB" },
    { label: "Edinburgh", value: "Edinburgh", country_region_code: "GB" },
    { label: "Athens", value: "Athens", country_region_code: "EL" },
    { label: "Athens", value: "Athens", country_region_code: "EL" },
    { label: "Piraeus", value: "Piraeus", country_region_code: "EL" },
    { label: "Thessaloniki", value: "Thessaloniki", country_region_code: "EL" },
    { label: "Chania", value: "Chania", country_region_code: "EL" },
    { label: "Kolymbia", value: "Kolymbia", country_region_code: "EL" },
    { label: "Alicante", value: "Alicante", country_region_code: "ES" },
    {
      label: "Palma Mallorca",
      value: "Palma Mallorca",
      country_region_code: "ES",
    },
    { label: "Barcelona", value: "Barcelona", country_region_code: "ES" },
    { label: "Caceres", value: "Caceres", country_region_code: "ES" },
    { label: "Madrid", value: "Madrid", country_region_code: "ES" },
  ];

  const next = () => setCurrentPage((prev) => prev + 1);
  const prev = () => setCurrentPage((prev) => prev - 1);

  const updateErrors = (errors: []) => {
    setErrorMsg(Object.values(errors).flat());
  };
  const updateError = (errors: []) => {
    let error = [] as any;
    error.push(errors);
    setErrorMsg(error.flat());
  };

  const onSubmit = async (values: any, e) => {
    // values.turnover = turnOver;
    // values.order_amount = orderAmount;
    // values.requested_amount = loanAmount;

    console.log(values);
    setLoading(true);
    try {
      let postData = await postSurvey(token, values);
      e.target.reset();
      setSubmitted(true);
      setLoading(false);
      const { data } = postData;
      setErrorMsg([]);
    } catch (error) {
      setLoading(false);
      console.log(error.response);
      if (error && error.response.status === 500) {
        let msg = [] as any;
        msg.push(error.response.data.message);
        setErrorMsg(msg);
        return;
      }
      if (!error.response) {
        let msg = [] as any;
        msg.push("Network Error, Check Your Internet Connection");
        setErrorMsg(msg);
        return;
      }
      const {
        response: { data },
      } = error;
      data.errors && updateErrors(data.errors);
    }
  };

  return (
    <>
      <main className="md:pl-12 loan-request-bg md:pb-32 ">
        <div className="flex ">
          <div className="w-full ">
            <div className="flex items-center mt-10 lg:mt-0">
              <div className="w-8 h-1 bg-green-700 rounded mr-3 hidden md:block"></div>
              <h4 className="bg-green-700 md:bg-transparent text-white md:text-gray-700 font-light md:font-semibold text-sm md:text-xl tracking-wide uppercase md:normal-case py-2 px-6 rounded-r-lg">
                Customer Questionnaire
              </h4>
            </div>
            <br />

            {errorMsg.length ? (
              <div
                className="w-11/12  bg-red-100 border-t-4 border-red-500 rounded-b text-red-900 px-4 py-3 shadow-md my-5"
                role="alert"
              >
                <div className="flex">
                  <div className="py-1">
                    <svg
                      className="fill-current h-6 w-6 text-red-500 mr-4"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                    >
                      <path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z" />
                    </svg>
                  </div>
                  <div>
                    <ul style={{ listStyleType: "none" }}>
                      {errorMsg.map((error, i) => (
                        <li key={i}>{error}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            ) : (
              ""
            )}

            <img
              src="/img/new-loan-mobile-card-bg.svg"
              alt=""
              className="md:hidden absolute mobile-card-bg"
            />
            <div className="relative w-11/12 bg-white flex rounded py-12 shadow-lg border-b-4 border-green-700 md:border-b-8 mb-20 m-auto md:m-0 mt-12 md:mt-0 loan-calc-alt">
              {submitted ? (
                <>
                  <div
                    className="bg-teal-100 border-t-4 border-teal-500 rounded-b text-teal-900 px-4 py-3 shadow-md fade-in m-auto"
                    role="alert"
                  >
                    <div className="flex">
                      <div className="py-1">
                        <svg
                          className="fill-current h-6 w-6 text-teal-500 mr-4"
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 20 20"
                        >
                          <path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z" />
                        </svg>
                      </div>
                      <div>
                        <p className="font-bold">Sent successfully</p>
                        <p className="text-sm">
                          Loan Application Submitted Successfully
                        </p>
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <form
                    className="w-full max-w-lg m-auto"
                    onSubmit={handleSubmit(onSubmit)}
                  >
                    <Stepper
                      steps={sections}
                      activeStep={currentPage}
                      activeColor="red"
                      defaultBarColor="red"
                      completeColor="green"
                      completeBarColor="green"
                    />
                    <div className="w-11/12 md:w-full px-3 m-auto">
                      <h3 className="md:hidden text-lg text-gray-700 text-center font-bold m-auto mb-10">
                        Kindly fill customer questionnaire
                      </h3>
                      {currentPage === 1 && (
                        <>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                FMGC CUSTOMER ID
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="text"
                                name="fmcg_customer_id"
                                ref={register({ required: true })}
                              />
                              {errors["fmcg_customer_id"] &&
                                errors["fmcg_customer_id"].type ===
                                  "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                Business Name{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="text"
                                name="business_name"
                                ref={register({ required: true })}
                              />
                              {errors["business_name"] &&
                                errors["business_name"].type === "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>

                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                Email <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="text"
                                name="email"
                                ref={register({ required: true })}
                              />
                              {errors["email"] &&
                                errors["email"].type === "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                Phone Number{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="text"
                                name="phone_number"
                                ref={register({ required: true })}
                              />
                              {errors["phone_number"] &&
                                errors["phone_number"].type === "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                Has the customer requested a loan before?{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <div className="relative">
                                <select
                                  className="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                  id="grid-state"
                                  name="has_any_previous_loans"
                                  ref={register({ required: true })}
                                >
                                  <option value="">- Select -</option>

                                  <option value={1}>Yes</option>
                                  <option value={0}>No</option>
                                </select>
                                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                                  <svg
                                    className="fill-current h-4 w-4"
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 20 20"
                                  >
                                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                                  </svg>
                                </div>
                              </div>
                              {errors["has_any_previous_loans"] &&
                                errors["has_any_previous_loans"].type ===
                                  "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>

                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                What is the business' address{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="text"
                                name="business_address"
                                ref={register({ required: true })}
                              />
                              {errors["business_address"] &&
                                errors["business_address"].type ===
                                  "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex justify-end w-full  mt-10">
                            <div className="md:inline-flex justify-end">
                              <button
                                // disabled={!submitted}
                                onClick={next}
                                className="bg-green-600 hover:bg-green-700 text-white text-md md:text-xl font-light py-3 px-6 md:py-3 md:px-8 rounded-r focus:outline-none focus:shadow-outline inline-flex items-center"
                                type="button"
                              >
                                <span> Next </span>
                                <svg
                                  className="ml-2 -mt-1"
                                  width="18"
                                  height="18"
                                  viewBox="0 0 18 18"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <g id="chevron_right_24px">
                                    <path
                                      id="icon/navigation/chevron_right_24px"
                                      d="M9.70492 6L8.29492 7.41L12.8749 12L8.29492 16.59L9.70492 18L15.7049 12L9.70492 6Z"
                                      fill="white"
                                    />
                                  </g>
                                </svg>
                              </button>
                            </div>
                          </div>
                        </>
                      )}
                      {currentPage === 2 && (
                        <>
                          <div className="w-full md:w-full  mb-3">
                            <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                              COUNTRY OF OPERATION{" "}
                              <span className="text-red-600">*</span>
                            </label>
                            <div className="relative">
                              <select
                                className="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-state"
                                name="country"
                                ref={register({ required: true })}
                              >
                                <>
                                  <option value="">- Select -</option>
                                  <option value="AE">
                                    United Arab Emirates
                                  </option>
                                  <option value="AT">Austria</option>
                                  <option value="AU">Australia</option>
                                  <option value="BE">Belgium</option>
                                  <option value="BG">Bulgaria</option>
                                  <option value="BN">Brunei Darussalam</option>
                                  <option value="BR">Brazil</option>
                                  <option value="CA">Canada</option>
                                  <option value="CH">Switzerland</option>
                                  <option value="CN">China</option>
                                  <option value="CR">Costa Rica</option>
                                  <option value="CY">Cyprus</option>
                                  <option value="CZ">Czech Republic</option>
                                  <option value="DE">Germany</option>
                                  <option value="DK">Denmark</option>
                                  <option value="DZ">Algeria</option>
                                  <option value="EE">Estonia</option>
                                  <option value="EL">Greece</option>
                                  <option value="ES">Spain</option>
                                  <option value="FI">Finland</option>
                                  <option value="FJ">Fiji Islands</option>
                                  <option value="FR">France</option>
                                  <option value="GB">Great Britain</option>
                                  <option value="HR">Croatia</option>
                                  <option value="HU">Hungary</option>
                                  <option value="ID">Indonesia</option>
                                  <option value="IE">Ireland</option>
                                  <option value="IN">India</option>
                                  <option value="IS">Iceland</option>
                                  <option value="IT">Italy</option>
                                  <option value="JP">Japan</option>
                                  <option value="KE">Kenya</option>
                                  <option value="LT">Lithuania</option>
                                  <option value="LU">Luxembourg</option>
                                  <option value="LV">Latvia</option>
                                  <option value="MA">Morocco</option>
                                  <option value="ME">Montenegro</option>
                                  <option value="MT">Malta</option>
                                  <option value="MX">Mexico</option>
                                  <option value="MY">Malaysia</option>
                                  <option value="MZ">Mozambique</option>
                                  <option value="NG">Nigeria</option>
                                  <option value="NL">Netherlands</option>
                                  <option value="NO">Norway</option>
                                  <option value="NZ">New Zealand</option>
                                  <option value="PH">Philippines</option>
                                  <option value="PL">Poland</option>
                                  <option value="PT">Portugal</option>
                                  <option value="RO">Romania</option>
                                  <option value="RS">Serbia</option>
                                  <option value="RU">Russia</option>
                                  <option value="SA">Saudi Arabia</option>
                                  <option value="SB">Solomon Islands</option>
                                  <option value="SE">Sweden</option>
                                  <option value="SG">Singapore</option>
                                  <option value="SI">Slovenia</option>
                                  <option value="SK">Slovakia</option>
                                  <option value="SZ">Swaziland</option>
                                  <option value="TH">Thailand</option>
                                  <option value="TN">Tunisia</option>
                                  <option value="TR">Turkey</option>
                                  <option value="TZ">Tanzania</option>
                                  <option value="UG">Uganda</option>
                                  <option value="US">USA</option>
                                  <option value="VU">Vanuatu</option>
                                  <option value="WS">Samoa</option>
                                  <option value="ZA">South Africa</option>
                                </>
                              </select>
                              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 ">
                                <svg
                                  className="fill-current h-4 w-4"
                                  xmlns="http://www.w3.org/2000/svg"
                                  viewBox="0 0 20 20"
                                >
                                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                                </svg>
                              </div>
                            </div>
                            {errors["country"] &&
                              errors["country"].type === "required" && (
                                <p className="text-red-500 text-xs italic">
                                  Please fill out this field.
                                </p>
                              )}
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                City of OPERATION{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <div className="relative">
                                <select
                                  className="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                  id="grid-state"
                                  ref={register({ required: true })}
                                  name="city"
                                >
                                  <>
                                    <option value="">- Select -</option>
                                    {city &&
                                      city.map((option, key) => {
                                        return (
                                          <option
                                            key={key}
                                            value={option.value}
                                          >
                                            {option.label}
                                          </option>
                                        );
                                      })}
                                  </>
                                </select>
                                <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 ">
                                  <svg
                                    className="fill-current h-4 w-4"
                                    xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 20 20"
                                  >
                                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                                  </svg>
                                </div>
                              </div>
                              {errors["city"] &&
                                errors["city"].type === "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                Number of employees?{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="number"
                                name="staff_count"
                                ref={register({ required: true })}
                              />
                              {errors["staff_count"] &&
                                errors["staff_count"].type === "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-full px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-10">
                                Customer's average monthly turn over?{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="number"
                                name="turnover"
                                ref={register({ required: true })}
                              />
                              {/* <div className="relative">
                            <Controller
                              control={control}
                              name="turnover"
                              defaultValue={turnOver}
                              render={({ onChange, onBlur, value }) => (
                                <InputRange
                                  formatLabel={(value) =>
                                    `₦` + Number(value).toLocaleString()
                                  }
                                  maxValue={Number(1000000)}
                                  minValue={Number(1000)}
                                  step={1000}
                                  value={turnOver}
                                  onChange={_handleTurnOverUpdate}
                                  name="turnover"
                                />
                              )}
                            />
                          </div> */}
                              {errors["turnover"] &&
                                errors["turnover"].type === "required" && (
                                  <p className="text-red-500 text-xs italic mt-6">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-ful px-3">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                                Order No <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="text"
                                name="order_no"
                                ref={register({ required: true })}
                              />
                              {errors["order_no"] &&
                                errors["order_no"].type === "required" && (
                                  <p className="text-red-500 text-xs italic">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full px-3 pt-4">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-10">
                                Order Amount{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="number"
                                name="order_amount"
                                ref={register({ required: true })}
                              />
                              {/* <div className="relative">
                            <Controller
                              control={control}
                              name="order_amount"
                              defaultValue={orderAmount}
                              render={({ onChange, onBlur, value }) => (
                                <InputRange
                                  formatLabel={(value) =>
                                    `₦` + Number(value).toLocaleString()
                                  }
                                  maxValue={Number(206000)}
                                  minValue={Number(1000)}
                                  step={1000}
                                  value={orderAmount}
                                  onChange={_handleOrderAmountUpdate}
                                  name="order_amount"
                                />
                              )}
                            />
                          </div> */}
                              {errors["order_amount"] &&
                                errors["order_amount"].type === "required" && (
                                  <p className="text-red-500 text-xs italic mt-6">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full px-3 pt-4">
                              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-10">
                                Loan Amount{" "}
                                <span className="text-red-600">*</span>
                              </label>
                              <input
                                className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                id="grid-last-name"
                                type="number"
                                name="requested_amount"
                                ref={register({ required: true })}
                              />
                              {/* <div className="relative">
                            <Controller
                              control={control}
                              name="requested_amount"
                              defaultValue={loanAmount}
                              render={({ onChange, onBlur, value }) => (
                                <InputRange
                                  formatLabel={(value) =>
                                    `₦` + Number(value).toLocaleString()
                                  }
                                  maxValue={Number(51000)}
                                  minValue={Number(1000)}
                                  step={1000}
                                  value={loanAmount}
                                  onChange={_handleLoanAmountUpdate}
                                  name="requested_amount"
                                />
                              )}
                            />
                          </div> */}
                              {errors["requested_amount"] &&
                                errors["requested_amount"].type ===
                                  "required" && (
                                  <p className="text-red-500 text-xs italic mt-6">
                                    Please fill out this field.
                                  </p>
                                )}
                            </div>
                          </div>
                          {/* <button onClick={prev}>Back</button> */}
                          <div className="flex justify-end w-full pr-0  mt-10">
                            <div className="md:inline-flex justify-end">
                              <button
                                onClick={prev}
                                className="bg-gray-500 hover:bg-gray-600 text-white text-md md:text-xl font-light py-2 px-6 md:py-3 md:px-8 rounded-l focus:outline-none focus:shadow-outline inline-flex items-center"
                                type="button"
                              >
                                <svg
                                  className="mr-2 -mt-1"
                                  width="18"
                                  height="18"
                                  viewBox="0 0 18 18"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <g id="chevron_right_24px">
                                    <path
                                      id="icon/navigation/chevron_left_24px"
                                      d="M15.705 16.59L11.125 12L15.705 7.41L14.295 6L8.29498 12L14.295 18L15.705 16.59Z"
                                      fill="white"
                                    />
                                  </g>
                                </svg>
                                <span> Previous </span>
                              </button>
                              <button
                                className={
                                  "bg-green-600 hover:bg-green-700 text-white text-md md:text-xl font-light py-3 px-6 md:py-3 md:px-8 rounded-r focus:outline-none focus:shadow-outline inline-flex items-center transition-colors duration-150 ease-in-out"
                                }
                                type="submit"
                              >
                                <span> Send </span>
                                {!loading ? (
                                  <svg
                                    className="ml-2 -mt-1"
                                    width="18"
                                    height="18"
                                    viewBox="0 0 18 18"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <g id="chevron_right_24px">
                                      <path
                                        id="icon/navigation/chevron_right_24px"
                                        d="M9.70492 6L8.29492 7.41L12.8749 12L8.29492 16.59L9.70492 18L15.7049 12L9.70492 6Z"
                                        fill="white"
                                      />
                                    </g>
                                  </svg>
                                ) : (
                                  <img
                                    src="/img/25.gif"
                                    className="ml-2"
                                    alt=""
                                  />
                                )}
                              </button>
                            </div>
                          </div>
                          <div
                            style={{
                              display: "flex",
                              justifyContent: "space-between",
                            }}
                          ></div>
                        </>
                      )}
                    </div>
                  </form>
                </>
              )}
            </div>
          </div>
        </div>
        <br />
      </main>
    </>
  );
};

export default withRouter(Survey);
